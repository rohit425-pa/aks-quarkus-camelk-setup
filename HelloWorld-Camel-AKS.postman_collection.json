{
	"info": {
		"_postman_id": "helloworld-camel-aks-2025",
		"name": "HelloWorld Camel Quarkus - AKS",
		"description": "Testing enterprise AKS deployed Quarkus + Apache Camel application\n\nApplication URL: http://4.246.33.120\nDeployment Date: October 29, 2025\nStatus: Live and Operational",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "enterprise-aks-testing"
	},
	"item": [
		{
			"name": "🚀 Application Endpoints",
			"item": [
				{
					"name": "GET - Main Endpoint (External API Integration)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type contains application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has UserDetailsOutput\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('UserDetailsOutput');",
									"    pm.expect(jsonData.UserDetailsOutput).to.be.an('array');",
									"    pm.expect(jsonData.UserDetailsOutput.length).to.be.greaterThan(0);",
									"});",
									"",
									"// Log response for debugging",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");",
									"console.log(\"Response Size:\", pm.response.headers.get(\"Content-Length\") || \"chunked\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/camelpoc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"camelpoc"
							]
						},
						"description": "Tests the main GET endpoint that:\n- Calls external httpbin.org API\n- Processes JSON data through Apache Camel routes\n- Returns structured UserDetailsOutput"
					},
					"response": []
				},
				{
					"name": "POST - JSON Processing Through Camel Routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test that response contains our input",
									"pm.test(\"Response contains input message\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText).to.include(\"Hello from Postman!\");",
									"});",
									"",
									"// Test that Camel processed the request",
									"pm.test(\"Response shows Camel processing\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText).to.include(\"POST route\");",
									"});",
									"",
									"console.log(\"POST Response:\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Hello from Postman!\",\n  \"timestamp\": \"{{$timestamp}}\",\n  \"testId\": \"{{$randomUUID}}\",\n  \"environment\": \"AKS Production\",\n  \"framework\": \"Quarkus + Apache Camel\",\n  \"deployment\": \"Azure Kubernetes Service\",\n  \"testing_tool\": \"Postman\",\n  \"iteration\": \"{{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/camelpoc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"camelpoc"
							]
						},
						"description": "Tests POST endpoint that:\n- Accepts JSON payload\n- Processes data through Apache Camel routes\n- Returns processed response\n- Demonstrates Camel integration patterns"
					},
					"response": []
				}
			],
			"description": "Core application endpoints for testing Quarkus + Camel functionality"
		},
		{
			"name": "💚 Health & Monitoring",
			"item": [
				{
					"name": "Overall Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test(\"Health check responds quickly (< 1000ms)\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test health status",
									"pm.test(\"Health status is UP\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UP\");",
									"});",
									"",
									"// Test health checks exist",
									"pm.test(\"Health checks are present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('checks');",
									"    pm.expect(jsonData.checks).to.be.an('array');",
									"});",
									"",
									"console.log(\"Health Status:\", pm.response.json().status);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/q/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"q",
								"health"
							]
						},
						"description": "Overall application health status used by Kubernetes and monitoring systems"
					},
					"response": []
				},
				{
					"name": "Kubernetes Liveness Probe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Liveness probe responds quickly\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Liveness status is UP\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UP\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/q/health/live",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"q",
								"health",
								"live"
							]
						},
						"description": "Kubernetes liveness probe endpoint - determines if pod should be restarted"
					},
					"response": []
				},
				{
					"name": "Kubernetes Readiness Probe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Readiness probe responds quickly\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Readiness status is UP\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UP\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/q/health/ready",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"q",
								"health",
								"ready"
							]
						},
						"description": "Kubernetes readiness probe endpoint - determines if pod should receive traffic"
					},
					"response": []
				}
			],
			"description": "Health check and monitoring endpoints for Kubernetes and operational monitoring"
		},
		{
			"name": "🔄 Load & Performance Testing",
			"item": [
				{
					"name": "Load Test - GET Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Performance test with more lenient timing for load testing",
									"pm.test(\"Response time under load < 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Status code is 200 under load\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Log performance metrics",
									"console.log(\"Load Test - Response Time:\", pm.response.responseTime + \"ms\");",
									"console.log(\"Load Test - Iteration:\", pm.iterationData.get(\"iteration\") || \"N/A\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Postman-LoadTest/{{$randomInt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/camelpoc?test=load&iteration={{$randomInt}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"camelpoc"
							],
							"query": [
								{
									"key": "test",
									"value": "load"
								},
								{
									"key": "iteration",
									"value": "{{$randomInt}}"
								}
							]
						},
						"description": "Load testing endpoint - use Collection Runner with multiple iterations"
					},
					"response": []
				},
				{
					"name": "Stress Test - POST Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST endpoint handles stress\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"console.log(\"Stress Test POST - Response Time:\", pm.response.responseTime + \"ms\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Load test iteration {{$randomInt}}\",\n  \"timestamp\": \"{{$timestamp}}\",\n  \"testId\": \"{{$randomUUID}}\",\n  \"loadTest\": true,\n  \"iteration\": {{$randomInt}},\n  \"stressLevel\": \"high\",\n  \"payload\": \"This is a larger payload for stress testing the POST endpoint with more data to process through Apache Camel routes in the Quarkus application running on Azure Kubernetes Service.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/camelpoc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"camelpoc"
							]
						},
						"description": "Stress testing POST endpoint with larger payloads"
					},
					"response": []
				}
			],
			"description": "Performance and load testing requests - use Collection Runner for automated testing"
		},
		{
			"name": "🔍 Error Testing",
			"item": [
				{
					"name": "404 - Non-existent Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 for non-existent endpoint\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"console.log(\"404 Test - Status:\", pm.response.status);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/nonexistent",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"nonexistent"
							]
						},
						"description": "Test error handling for non-existent endpoints"
					},
					"response": []
				},
				{
					"name": "Invalid JSON POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid JSON handled gracefully\", function () {",
									"    // Expect 400 or 500 series error",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 415, 500]);",
									"});",
									"",
									"console.log(\"Invalid JSON Test - Status:\", pm.response.status);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ invalid json payload without proper formatting"
						},
						"url": {
							"raw": "{{base_url}}/camelpoc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"camelpoc"
							]
						},
						"description": "Test error handling for invalid JSON payloads"
					},
					"response": []
				}
			],
			"description": "Error handling and edge case testing"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log(\"Testing HelloWorld Camel Quarkus on AKS\");",
					"console.log(\"Request:\", pm.request.method, pm.request.url.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"console.log(\"Response Status:\", pm.response.status, pm.response.code);",
					"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");",
					"console.log(\"---\");"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://4.246.33.120",
			"type": "string"
		}
	]
}